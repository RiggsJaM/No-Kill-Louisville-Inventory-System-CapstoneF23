@page "/OtherPetFoodInventoryEntry"

@using System.ComponentModel.DataAnnotations
@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Other Pet Food Inventory Entry</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Other Pet Food Inventory Entry</h1>

        <div class="row">
            <div class="col-md4">
                <EditForm Model="Input" FormName="Cat" OnValidSubmit="() => HandleValidSubmit()" Context="editContext">
                    <DataAnnotationsValidator/>
                    @if (formSubmitted)
                    {
                        <div class="alert alert-success" role="alert">
                            Form successfully submitted!
                        </div>
                    }
                    <hr/>
                    <ValidationSummary class="text-danger" role="alert"/>

                    <table style="width:100%">
                        <tr>
                            <th>Animal</th>
                            <th>Description</th>
                            <th>Quantity (lbs)</th>
                        </tr>
                        <tr>
                            <td><InputText @bind-Value="Input.Animal"/></td>
                            <td><InputText @bind-Value="Input.Desc"/></td>
                            <td><InputNumber @bind-Value="Input.WeightOther"/></td>
                        </tr>
                    </table>
                    <button type="submit" class="btn btn-primary" @onclick="(() => { OtherItemStore(); })">
                        Submit
                    </button>
                </EditForm>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    
    private bool formSubmitted = false;
    
    public Task HandleValidSubmit()
    {
        formSubmitted = true;
        Input = new InputModel(); // Clear form fields
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void OtherItemStore()
    {
        using (var context = new ApplicationDbContext(new DbContextOptions<ApplicationDbContext>()))
        {
            var newOtherItem = new OtherItem
            {
                Animal = Input.Animal,
                Desc = Input.Desc,
                Weight = Input.WeightOther,
                
            };
            context.Add(newOtherItem);
            context.SaveChanges();
        }
    }
    
    
    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "Should input a String")]
        [Display(Name = "Animal")]
        public String Animal { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "Should input a String")]
        [Display(Name = "Desc")]
        public String Desc { get; set; }
        
        [Required(ErrorMessage = "Should input a number")]
        [Display(Name = "WeightOther")]
        public int WeightOther { get; set; }
    }
}
@page "/InventoryEntry"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Inventory Entry</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Inventory Entry</h1>
        
        <div class="row">
            <div class="col-md4">
                <EditForm Model="Input" method Context="editContext">
                    <DataAnnotationsValidator/>
                    <h2>All fields must be filled</h2>
                    <hr/>
                    <h6>Choose what type of food you are adding to the inventory</h6>
                    <ValidationSummary class="text-danger" role="alert"/>
                    <style>
                    /* Style The Dropdown Button */
                    .dropbtn {
                      background-color: #286fc0;
                      color: white;
                      padding: 8px;
                      font-size: 16px;
                      border: none;
                      cursor: pointer;
                      border-radius: 4px;
                    }

                    /* The container - needed to position the dropdown content */
                    .dropdown {
                      position: relative;
                      display: inline-block;
                    }

                    /* Dropdown Content (Hidden by Default) */
                    .dropdown-content {
                      display: none;
                      position: absolute;
                      background-color: #f9f9f9;
                      min-width: 160px;
                      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
                      z-index: 1;
                    }

                    /* Links inside the dropdown */
                    .dropdown-content a {
                      color: black;
                      padding: 12px 16px;
                      text-decoration: none;
                      display: block;
                    }

                    /* Change color of dropdown links on hover */
                    .dropdown-content a:hover {background-color: #f1f1f1}

                    /* Show the dropdown menu on hover */
                    .dropdown:hover .dropdown-content {
                      display: block;
                    }

                    /* Change the background color of the dropdown button when the dropdown content is shown */
                    .dropdown:hover .dropbtn {
                      background-color: #3e8e41;
                    }
                    </style>

                    <div class="dropdown">
                      <button class="dropbtn">Food Type</button>
                      <div class="dropdown-content">
                        <a href="/DogFoodInventoryEntry">Dog</a>
                        <a href="/CatFoodInventoryEntry">Cat</a>
                        <a href="/OtherPetFoodInventoryEntry">Other Pets</a>
                      </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    
    public void CatItemStore()
    {
        using (var context = new ApplicationDbContext(new DbContextOptions<ApplicationDbContext>()))
        {
            var newCatItem = new CatItem
            {
                Wet = Input.WetCat,
                Adult = Input.AdultCat,
                Kitty = Input.Kitty,
                Special = Input.SpecialCat,
                Weight = Input.WeightCat
            };
        }
    }
    
    public void DogItemStore()
    {
        using (var context = new ApplicationDbContext(new DbContextOptions<ApplicationDbContext>()))
        {
            var newDogItem = new DogItem()
            {
                Wet = Input.WetDog,
                Puppy = Input.Puppy,
                WgtCtrl = Input.WgtControl,
                GrainFree = Input.GrainFree,
                SmBites = Input.SmBites,
                Special = Input.SpecialDog,
                Weight = Input.WeightDog
            };
        }
    }
    
    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true of false")]
        [Display(Name = "WetCat")]
        public bool WetCat { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false")]
        [Display(Name = "AdultCat")]
        public bool AdultCat { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false")]
        [Display(Name = "Kitty")]
        public bool Kitty { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "")]
        [Display(Name = "SpecialCat")]
        public String? SpecialCat { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "Should input a number")]
        [Display(Name = "WeightCat")]
        public int WeightCat { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false")]
        [Display(Name = "WetDog")]
        public bool WetDog { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true and false")]
        [Display(Name = "Puppy")]
        public bool Puppy { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true and false")]
        [Display(Name = "WgtControl")]
        public bool WgtControl { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true and false")]
        [Display(Name = "GrainFree")]
        public bool GrainFree { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true and false")]
        [Display(Name = "SmBites")]
        public bool SmBites { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "")]
        [Display(Name = "SpecialDog")]
        public String? SpecialDog { get; set; }
        
        [Required]
        [StringLength(100, ErrorMessage = "Should input a number")]
        [Display(Name = "WeightDog")]
        public int WeightDog { get; set; }
    }
}
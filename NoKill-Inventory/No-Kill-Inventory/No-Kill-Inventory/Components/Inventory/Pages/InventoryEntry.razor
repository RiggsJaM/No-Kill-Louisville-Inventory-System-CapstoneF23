@page "/InventoryEntry"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Inventory Entry</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Inventory Entry</h1>

        <div class="row">
            <div class="col-md4">
                <EditForm Model="Input" method Context="editContext">
                    <DataAnnotationsValidator/>
                    <h2>All fields must be filled</h2>
                    <hr/>
                    <ValidationSummary class="text-danger" role="alert"/>
                    <div class="form-floating mb-3">
                        <InputNumber @bind-Value="Input.ItemID"/>
                    </div>
                    <div>
                        <button type="button" class="btn btn-primary" @onclick="(() => { ItemStore(); })">
                            Test Input
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    public void ItemStore()
    {
        using (var context = new ApplicationDbContext(new DbContextOptions<ApplicationDbContext>()))
        {
            var newItem = new Item
            {
                itemID = 2,
                Brand = "Not Blue",
                Animal = "Dog",
                Prescription = true,
                PrescriptionDesc = "Arthritis",
                DryWet = "Dry",
                Age = "Adult",
                GrainFree = false,
                WeightCtrl = false,
                SmallBites = true,
                Junk = false,
                Qty = 14,
                FoodWeight = 20
                // itemID = Input.ItemID,
                // Brand = Input.Brand,
                // Animal = Input.Animal,
                // Prescription = Input.Prescription,
                // PrescriptionDesc = Input.PrescriptionDesc,
                // DryWet = Input.DryWet,
                // Age = Input.Age,
                // GrainFree = Input.GrainFree,
                // WeightCtrl = Input.WeightCtrl,
                // SmallBites = Input.SmallBites,
                // Junk = Input.Junk,
                // Qty = Input.Qty,
                // FoodWeight = Input.FoodWeight
            };
            context.Add(newItem);
            context.SaveChanges();
        }
    }
    
    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a numerical value.")]
        [Display(Name = "ItemID")]
        public int ItemID { get; set; } = 0;

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a text value.")]
        [Display(Name = "Brand")]
        public string Brand { get; set; } = "";
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a text value.")]
        [Display(Name = "Animal")]
        public string Animal { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false.")]
        [Display(Name = "Prescription")]
        public bool Prescription { get; set; } = false;
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a text value.")]
        [Display(Name = "Prescription Description")]
        public string PrescriptionDesc { get; set; } = "";
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a text value.")]
        [Display(Name = "Dry or Wet")]
        public string DryWet { get; set; } = "";
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a text value.")]
        [Display(Name = "Age")]
        public string Age { get; set; } = "";
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false.")]
        [Display(Name = "Grain Free")]
        public bool GrainFree { get; set; } = false;
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false.")]
        [Display(Name = "Weight Control")]
        public bool WeightCtrl { get; set; } = false;
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false.")]
        [Display(Name = "Small Bites")]
        public bool SmallBites { get; set; } = false;
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be true or false.")]
        [Display(Name = "Junk")]
        public bool Junk { get; set; } = false;
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a numerical value.")]
        [Display(Name = "Quantity")]
        public int Qty { get; set; } = 0;
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be a numerical value.")]
        [Display(Name = "FoodWeight")]
        public int FoodWeight { get; set; } = 0;
    }
}